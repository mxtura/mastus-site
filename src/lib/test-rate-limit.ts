// –¢–µ—Å—Ç–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
import { rateLimit } from './rate-limit'

export async function testRateLimit() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...')
  
  const testId = 'test_user_123'
  const results = []
  
  // –î–µ–ª–∞–µ–º 5 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  for (let i = 1; i <= 5; i++) {
    const result = await rateLimit(testId)
    results.push({
      request: i,
      success: result.success,
      remaining: result.remaining
    })
    console.log(`–ó–∞–ø—Ä–æ—Å ${i}: success=${result.success}, remaining=${result.remaining}`)
  }
  
  return results
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Redis –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function clearRateLimitData(identifier: string) {
  try {
    const { default: redisClient } = await import('./redis')
    if (redisClient && redisClient.isReady()) {
      const client = redisClient.getClient()
      await client.del(`rate_limit:${identifier}`)
      console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ rate limiting –¥–ª—è ${identifier}`)
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å Redis, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory fallback', error)
  }
}
